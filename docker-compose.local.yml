version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: learntrac-postgres
    environment:
      - POSTGRES_DB=learntrac
      - POSTGRES_USER=learntrac_admin
      - POSTGRES_PASSWORD=learntrac_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - learntrac-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U learntrac_admin -d learntrac"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j Database
  neo4j-dev:
    image: neo4j:5.12
    container_name: neo4j-dev
    environment:
      - NEO4J_AUTH=neo4j/8pQcA75CGQYcUNaZTHKYZSAo8tO9h-Z5oqkxk_G1c1o
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_memory_heap_max__size=1G
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
    networks:
      - learntrac-network
    healthcheck:
      test: ["CMD", "neo4j", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis-dev:
    image: redis:7-alpine
    container_name: redis-dev
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - learntrac-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Simple Python HTTP server to test
  test-server:
    image: python:3.11-slim
    container_name: test-server
    command: python -m http.server 8080
    ports:
      - "8080:8080"
    networks:
      - learntrac-network
    working_dir: /app
    volumes:
      - ./:/app

networks:
  learntrac-network:
    driver: bridge

volumes:
  postgres-data:
  neo4j-data:
  neo4j-logs:
  redis-data: