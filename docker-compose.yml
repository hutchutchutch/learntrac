version: '3.8'

services:
  # Neo4j Graph Database (local for development, can be replaced with Neo4j Aura)
  neo4j:
    image: neo4j:5.12.0
    container_name: learntrac-neo4j
    environment:
      - NEO4J_AUTH=neo4j/neo4jpassword
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms.memory.heap.initial_size=1G
      - NEO4J_dbms_memory_heap_max__size=1G
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD-SHELL", "wget -O /dev/null -q http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - learntrac-network

  # Trac Legacy Application (Python 2.7)
  trac-legacy:
    build:
      context: ./docker/trac
      dockerfile: Dockerfile
    container_name: trac-legacy
    ports:
      - "8000:8000"  # Trac web interface
    environment:
      - TRAC_ENV=/var/trac/projects/learntrac
      # AWS RDS PostgreSQL connection
      - DATABASE_URL=${RDS_DATABASE_URL:-postgresql://learntrac_admin:Vp-Sl%7D%7DD%5B%28j%26zxP5cjh%25MTQtitYq2ic7@hutch-learntrac-dev-db.c1uuigcm4bd1.us-east-2.rds.amazonaws.com:5432/learntrac}
      - POSTGRES_HOST=${RDS_HOST:-hutch-learntrac-dev-db.c1uuigcm4bd1.us-east-2.rds.amazonaws.com}
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${RDS_DATABASE:-learntrac}
      - POSTGRES_USER=${RDS_USERNAME:-learntrac}
      - POSTGRES_PASSWORD=${RDS_PASSWORD}
      # API integration
      - LEARNTRAC_API_URL=http://learntrac-api:8001
      - LEARNTRAC_API_KEY=${LEARNTRAC_API_KEY:-}
    volumes:
      # Mount Trac environment
      - trac_env:/var/trac/projects
      # Mount plugins
      - ./plugins:/app/plugins
      # Mount templates
      - ./templates:/app/templates
      # Mount configuration
      - ./conf:/app/config
      # Mount htdocs
      - ./htdocs:/app/htdocs
      # Mount wiki pages
      - ./wiki:/app/wiki
    networks:
      - learntrac-network
    restart: unless-stopped

  # LearnTrac Modern API (Python 3.11)
  learntrac-api:
    build:
      context: ./learntrac-api
      dockerfile: Dockerfile
    container_name: learntrac-api
    ports:
      - "8001:8001"  # API port
    environment:
      # Neo4j connection (local or Aura)
      - NEO4J_URI=${NEO4J_URI:-bolt://neo4j:7687}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-neo4jpassword}
      # AWS RDS PostgreSQL connection
      - DATABASE_URL=${RDS_DATABASE_URL:-postgresql://learntrac_admin:Vp-Sl%7D%7DD%5B%28j%26zxP5cjh%25MTQtitYq2ic7@hutch-learntrac-dev-db.c1uuigcm4bd1.us-east-2.rds.amazonaws.com:5432/learntrac}
      # OpenAI API
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
      # Trac integration
      - TRAC_URL=http://trac-legacy:8000
      - TRAC_ADMIN_USER=${TRAC_ADMIN_USER:-admin}
      - TRAC_ADMIN_PASSWORD=${TRAC_ADMIN_PASSWORD:-admin}
      # AWS configuration (optional)
      - AWS_REGION=${AWS_REGION:-us-east-2}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
    depends_on:
      neo4j:
        condition: service_healthy
      trac-legacy:
        condition: service_started
    volumes:
      # For development - mount source code
      - ./learntrac-api:/app
      # For uploads
      - ./uploads:/app/uploads
      # For logs
      - ./logs:/app/logs
      # Shared with Trac for file access
      - trac_env:/var/trac/projects:ro
    command: ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8001", "--reload"]
    networks:
      - learntrac-network
    restart: unless-stopped

  # Optional: Redis for caching (can use AWS ElastiCache in production)
  # redis:
  #   image: redis:7-alpine
  #   container_name: learntrac-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - learntrac-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # OAuth2 Proxy for Cognito authentication
  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.5.0
    container_name: oauth2-proxy
    environment:
      OAUTH2_PROXY_CLIENT_ID: "47puc5a858179his8g5f60ij4h"
      OAUTH2_PROXY_CLIENT_SECRET: "${COGNITO_CLIENT_SECRET}"
      OAUTH2_PROXY_COOKIE_SECRET: "${OAUTH2_PROXY_COOKIE_SECRET}"
      OAUTH2_PROXY_PROVIDER: "oidc"
      OAUTH2_PROXY_OIDC_ISSUER_URL: "https://cognito-idp.us-east-2.amazonaws.com/us-east-2_1AzmDXp0K"
      OAUTH2_PROXY_REDIRECT_URL: "http://localhost/oauth2/callback"
      OAUTH2_PROXY_EMAIL_DOMAINS: "*"
      OAUTH2_PROXY_UPSTREAM: "http://trac-legacy:8000"
      OAUTH2_PROXY_HTTP_ADDRESS: "0.0.0.0:4180"
      OAUTH2_PROXY_PASS_USER_HEADERS: "true"
      OAUTH2_PROXY_SET_XAUTHREQUEST: "true"
      OAUTH2_PROXY_PASS_ACCESS_TOKEN: "true"
      OAUTH2_PROXY_COOKIE_DOMAINS: "localhost"
      OAUTH2_PROXY_WHITELIST_DOMAINS: "localhost"
    networks:
      - learntrac-network
    depends_on:
      - trac-legacy

  # Nginx reverse proxy for authentication
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - learntrac-network
    depends_on:
      - oauth2-proxy
      - trac-legacy

  # Optional: Nginx reverse proxy for production
  # nginx:
  #   image: nginx:alpine
  #   container_name: learntrac-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/learntrac.conf:/etc/nginx/conf.d/default.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - trac-legacy
  #     - learntrac-api
  #   networks:
  #     - learntrac-network

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  trac_env:
    driver: local
  # redis_data:
  #   driver: local

networks:
  learntrac-network:
    driver: bridge